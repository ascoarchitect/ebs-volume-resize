AWSTemplateFormatVersion: '2010-09-09'
Description: 'CloudFormation template for EBS volume auto-resize using Step Functions'

Resources:
  # IAM Role for the Step Functions
  EBSResizeStepFunctionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: states.amazonaws.com
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: EBSResizeStepFunctionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'ec2:DescribeVolumes'
                  - 'ec2:ModifyVolume'
                  - 'ec2:DescribeTags'
                  - 'ec2:CreateTags'
                  - 'ec2:DescribeInstances'
                Resource: '*'
              - Effect: Allow
                Action: 'lambda:InvokeFunction'
                Resource: '*'
              - Effect: Allow
                Action: 'ssm:SendCommand'
                Resource: '*'

  # Lambda Role for volume checks and resize operations
  EBSResizeLambdaRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      Policies:
        - PolicyName: EBSResizeLambdaPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'ec2:DescribeVolumes'
                  - 'ec2:ModifyVolume'
                  - 'ec2:DescribeTags'
                  - 'ec2:CreateTags'
                  - 'ec2:DescribeInstances'
                Resource: '*'

  # Lambda function to validate volume tags and calculate new size
  EvaluateVolumeTagsFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: index.handler
      Role: !GetAtt EBSResizeLambdaRole.Arn
      Runtime: python3.13
      Architectures:
        - arm64
      Timeout: 30
      Code:
        ZipFile: |
          import boto3
          import json
          
          def handler(event, context):
              volume_id = event['volumeId']
              
              ec2 = boto3.client('ec2')
              
              # Get volume information
              response = ec2.describe_volumes(VolumeIds=[volume_id])
              
              if not response['Volumes']:
                  return {
                      'resizeNeeded': False,
                      'reason': f"Volume {volume_id} not found"
                  }
              
              volume = response['Volumes'][0]
              current_size = volume['Size']
              
              # Get volume tags
              tags = {tag['Key']: tag['Value'] for tag in volume.get('Tags', [])}
              
              # Get resize amount and max size from volume tags
              try:
                  resize_amount = int(tags.get('ResizeAmountGB', '10'))
                  max_size = int(tags.get('MaxResizeGB', '1000'))
              except ValueError as e:
                  return {
                      'resizeNeeded': False,
                      'reason': f"Invalid tag values: {str(e)}"
                  }
              
              # Calculate new size
              new_size = current_size + resize_amount
              
              # Ensure we don't exceed max size
              if new_size > max_size:
                  if current_size >= max_size:
                      return {
                          'resizeNeeded': False,
                          'reason': f"Volume already at or exceeding maximum size of {max_size} GB"
                      }
                  new_size = max_size
              
              # Determine attachment information
              attachment_info = None
              if volume['Attachments']:
                  attachment = volume['Attachments'][0]
                  attachment_info = {
                      'instanceId': attachment['InstanceId'],
                      'device': attachment['Device']
                  }
              
              return {
                  'resizeNeeded': True,
                  'volumeId': volume_id,
                  'currentSize': current_size,
                  'newSize': new_size,
                  'attachment': attachment_info
              }

  # Lambda function to resize the volume
  ResizeVolumeFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: index.handler
      Role: !GetAtt EBSResizeLambdaRole.Arn
      Runtime: python3.13
      Architectures:
        - arm64
      Timeout: 60
      Code:
        ZipFile: |
          import boto3
          import json
          from datetime import datetime
          
          def handler(event, context):
              volume_id = event['volumeId']
              new_size = event['newSize']
              current_size = event['currentSize']
              
              ec2 = boto3.client('ec2')
              
              try:
                  # Perform the resize
                  response = ec2.modify_volume(
                      VolumeId=volume_id,
                      Size=new_size
                  )
                  
                  # Add a tag to track resize history
                  timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
                  ec2.create_tags(
                      Resources=[volume_id],
                      Tags=[
                          {
                              'Key': 'LastAutoResize',
                              'Value': f"{timestamp}: Resized from {current_size}GB to {new_size}GB"
                          }
                      ]
                  )
                  
                  return {
                      'volumeId': volume_id,
                      'resizeStatus': 'Initiated',
                      'currentSize': current_size,
                      'targetSize': new_size
                  }
                  
              except Exception as e:
                  return {
                      'error': str(e),
                      'volumeId': volume_id
                  }

  # Lambda function to check the OS type
  CheckOSTypeFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: index.handler
      Role: !GetAtt EBSResizeLambdaRole.Arn
      Runtime: python3.13
      Architectures:
        - arm64
      Timeout: 30
      Code:
        ZipFile: |
          import boto3
          
          def handler(event, context):
              if not event.get('attachment'):
                  return {
                      'hasInstance': False,
                      'reason': 'Volume not attached to any instance'
                  }
                  
              instance_id = event['attachment']['instanceId']
              device = event['attachment']['device']
              
              ec2 = boto3.client('ec2')
              
              # Get instance information
              response = ec2.describe_instances(InstanceIds=[instance_id])
              
              if not response['Reservations'] or not response['Reservations'][0]['Instances']:
                  return {
                      'hasInstance': False,
                      'reason': f"Instance {instance_id} not found"
                  }
                  
              instance = response['Reservations'][0]['Instances'][0]
              platform_details = instance.get('PlatformDetails', 'Linux/UNIX')
              
              is_windows = 'Windows' in platform_details
              
              return {
                  'hasInstance': True,
                  'instanceId': instance_id,
                  'device': device,
                  'isWindows': is_windows,
                  'platformDetails': platform_details
              }

  # Lambda function to extend Linux file system
  ExtendLinuxFilesystemFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: index.handler
      Role: !GetAtt EBSResizeLambdaRole.Arn
      Runtime: python3.13
      Architectures:
        - arm64
      Timeout: 60
      Code:
        ZipFile: |
          import boto3
          import json
          
          def handler(event, context):
              instance_id = event['instanceId']
              device = event['device']
              
              ssm = boto3.client('ssm')
              
              # Prepare the shell script
              device_name = device.replace('/dev/sd', '/dev/xvd')
              commands = f"""
              # Get the file system type
              DEVICE="{device_name}"
              MOUNT_POINT=$(df -h | grep $DEVICE | awk '{{print $6}}')
              FSTYPE=$(lsblk -f $DEVICE -o FSTYPE | tail -n 1)
              
              echo "Device: $DEVICE, Mount point: $MOUNT_POINT, Filesystem type: $FSTYPE"
              
              # Extend the file system based on type
              if [[ "$FSTYPE" == "xfs" ]]; then
                xfs_growfs $MOUNT_POINT
                echo "Extended XFS filesystem"
              elif [[ "$FSTYPE" == "ext"* ]]; then
                resize2fs $DEVICE
                echo "Extended EXT filesystem"
              else
                echo "Unsupported file system type: $FSTYPE"
                exit 1
              fi
              """
              
              try:
                  # Run the command on the instance
                  response = ssm.send_command(
                      InstanceIds=[instance_id],
                      DocumentName='AWS-RunShellScript',
                      Parameters={'commands': [commands]},
                      Comment='Extend Linux filesystem after EBS resize'
                  )
                  
                  command_id = response['Command']['CommandId']
                  
                  return {
                      'success': True,
                      'instanceId': instance_id,
                      'commandId': command_id
                  }
                  
              except Exception as e:
                  return {
                      'success': False,
                      'error': str(e),
                      'instanceId': instance_id
                  }

  # Lambda function to extend Windows file system
  ExtendWindowsFilesystemFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: index.handler
      Role: !GetAtt EBSResizeLambdaRole.Arn
      Runtime: python3.13
      Architectures:
        - arm64
      Timeout: 60
      Code:
        ZipFile: |
          import boto3
          
          def handler(event, context):
              instance_id = event['instanceId']
              
              ssm = boto3.client('ssm')
              
              # Prepare the PowerShell script
              commands = """
              $disks = Get-Disk
              
              # Find all disks with a RAW partition (typically indicating unallocated space)
              foreach ($disk in $disks) {
                  $partitions = Get-Partition -DiskNumber $disk.Number
                  $needsExtend = $false
                  
                  # Check if disk has any valid volumes
                  foreach ($partition in $partitions) {
                      if ($partition.Type -ne "Reserved" -and $partition.DriveLetter) {
                          $needsExtend = $true
                          $partitionNumber = $partition.PartitionNumber
                          $driveLetter = $partition.DriveLetter
                          
                          # Get max size for partition
                          $maxSize = (Get-PartitionSupportedSize -DiskNumber $disk.Number -PartitionNumber $partitionNumber).SizeMax
                          
                          # Extend the partition
                          Write-Output "Extending partition $partitionNumber on disk $($disk.Number) (Drive $driveLetter) to maximum size"
                          Resize-Partition -DiskNumber $disk.Number -PartitionNumber $partitionNumber -Size $maxSize
                      }
                  }
              }
              
              Write-Output "Disk extension complete"
              """
              
              try:
                  # Run the command on the instance
                  response = ssm.send_command(
                      InstanceIds=[instance_id],
                      DocumentName='AWS-RunPowerShellScript',
                      Parameters={'commands': [commands]},
                      Comment='Extend Windows filesystem after EBS resize'
                  )
                  
                  command_id = response['Command']['CommandId']
                  
                  return {
                      'success': True,
                      'instanceId': instance_id,
                      'commandId': command_id
                  }
                  
              except Exception as e:
                  return {
                      'success': False,
                      'error': str(e),
                      'instanceId': instance_id
                  }

  # Step Functions State Machine
  EBSResizeStateMachine:
    Type: 'AWS::StepFunctions::StateMachine'
    Properties:
      RoleArn: !GetAtt EBSResizeStepFunctionRole.Arn
      DefinitionString: !Sub |
        {
          "Comment": "State machine for auto-resizing EBS volumes",
          "StartAt": "EvaluateVolumeTags",
          "States": {
            "EvaluateVolumeTags": {
              "Type": "Task",
              "Resource": "${EvaluateVolumeTagsFunction.Arn}",
              "Next": "IsResizeNeeded"
            },
            "IsResizeNeeded": {
              "Type": "Choice",
              "Choices": [
                {
                  "Variable": "$.resizeNeeded",
                  "BooleanEquals": true,
                  "Next": "ResizeVolume"
                }
              ],
              "Default": "ResizeNotNeeded"
            },
            "ResizeNotNeeded": {
              "Type": "Succeed"
            },
            "ResizeVolume": {
              "Type": "Task",
              "Resource": "${ResizeVolumeFunction.Arn}",
              "Next": "WaitForResize"
            },
            "WaitForResize": {
              "Type": "Wait",
              "Seconds": 30,
              "Next": "CheckOSType"
            },
            "CheckOSType": {
              "Type": "Task",
              "Resource": "${CheckOSTypeFunction.Arn}",
              "Next": "IsInstanceAttached"
            },
            "IsInstanceAttached": {
              "Type": "Choice",
              "Choices": [
                {
                  "Variable": "$.hasInstance",
                  "BooleanEquals": true,
                  "Next": "IsWindowsOS"
                }
              ],
              "Default": "NoInstanceAttached"
            },
            "NoInstanceAttached": {
              "Type": "Succeed"
            },
            "IsWindowsOS": {
              "Type": "Choice",
              "Choices": [
                {
                  "Variable": "$.isWindows",
                  "BooleanEquals": true,
                  "Next": "ExtendWindowsFilesystem"
                }
              ],
              "Default": "ExtendLinuxFilesystem"
            },
            "ExtendLinuxFilesystem": {
              "Type": "Task",
              "Resource": "${ExtendLinuxFilesystemFunction.Arn}",
              "Next": "ResizeComplete"
            },
            "ExtendWindowsFilesystem": {
              "Type": "Task",
              "Resource": "${ExtendWindowsFilesystemFunction.Arn}",
              "Next": "ResizeComplete"
            },
            "ResizeComplete": {
              "Type": "Succeed"
            }
          }
        }

  # IAM Role for CloudWatch Alarm Creation Lambda
  EBSAlarmCreationRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      Policies:
        - PolicyName: EBSAlarmCreationPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'ec2:DescribeVolumes'
                  - 'ec2:DescribeTags'
                  - 'ec2:DescribeInstances'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'cloudwatch:PutMetricAlarm'
                  - 'cloudwatch:DescribeAlarms'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'events:PutRule'
                  - 'events:PutTargets'
                  - 'events:DescribeRule'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'lambda:AddPermission'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'iam:GetRole'
                Resource: '*'
              - Effect: Allow
                Action: 'iam:PassRole'
                Resource: !GetAtt EBSResizeStepFunctionRole.Arn
              - Effect: Allow
                Action:
                  - 'sts:GetCallerIdentity'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'states:StartExecution'
                Resource: !Ref EBSResizeStateMachine
              # Add SSM permissions for retrieving mount points
              - Effect: Allow
                Action:
                  - 'ssm:SendCommand'
                  - 'ssm:GetCommandInvocation'
                Resource: '*'

  # Lambda function to set up CloudWatch alarms
  EBSAlarmCreationFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: index.handler
      Environment:
        Variables:
          STEP_FUNCTION_ROLE_ARN: !GetAtt EBSResizeStepFunctionRole.Arn
          STATE_MACHINE_ARN: !Ref EBSResizeStateMachine
      Role: !GetAtt EBSAlarmCreationRole.Arn
      Runtime: python3.13
      Architectures:
        - arm64
      Timeout: 300
      Code:
        ZipFile: !Sub |
          import os
          import boto3
          import json
          import logging
          import cfnresponse
          import time
          import re
          import unicodedata

          # Setup logging
          logger = logging.getLogger()
          logger.setLevel(logging.INFO)

          ec2 = boto3.client('ec2')
          cloudwatch = boto3.client('cloudwatch')
          events = boto3.client('events')
          ssm = boto3.client('ssm')

          STATE_MACHINE_ARN = os.environ['STATE_MACHINE_ARN']

          def handler(event, context):
              logger.info(f"Received event: {json.dumps(event)}")
              
              # Handle CloudFormation custom resource events
              if event.get('RequestType') == 'Create' or event.get('RequestType') == 'Update':
                  try:
                      # Get all EC2 instances
                      ec2_response = ec2.describe_instances()
                      
                      # Process all instances to find ones with EBSAutoResize tag
                      for reservation in ec2_response['Reservations']:
                          for instance in reservation['Instances']:
                              instance_id = instance['InstanceId']
                              
                              # Get instance tags
                              instance_tags = {tag['Key']: tag['Value'] for tag in instance.get('Tags', [])}
                              
                              # Check if auto-resize is enabled for this instance
                              if instance_tags.get('EBSAutoResize', 'false').lower() == 'true':
                                  logger.info(f"Instance {instance_id} has EBSAutoResize tag enabled. Setting up monitoring.")
                                  
                                  # For each attached volume, set up monitoring
                                  for block_device in instance.get('BlockDeviceMappings', []):
                                      if 'Ebs' in block_device:
                                          volume_id = block_device['Ebs']['VolumeId']
                                          device = block_device['DeviceName']
                                          
                                          # Set up monitoring for this volume
                                          setup_volume_monitoring(instance_id, volume_id, device)
                      
                      # Set up EventBridge rule to check for new volumes periodically
                      setup_instance_check_schedule(context.invoked_function_arn)
                      
                      cfnresponse.send(event, context, cfnresponse.SUCCESS, 
                                      {'Message': 'Successfully created alarms for tagged instances'})
                  except Exception as e:
                      logger.error(f"Error setting up alarms: {e}")
                      cfnresponse.send(event, context, cfnresponse.FAILED, 
                                      {'Message': f"Error: {str(e)}"})
              
              elif event.get('RequestType') == 'Delete':
                  # Handle stack deletion - could clean up alarms here
                  cfnresponse.send(event, context, cfnresponse.SUCCESS, 
                                  {'Message': 'Resource deletion acknowledged'})
              
              # Handle scheduled events to check for new instances/volumes
              elif event.get('source') == 'aws.events':
                  check_for_tagged_instances()
                  return {
                      'statusCode': 200,
                      'body': json.dumps('Completed check for new instances')
                  }
              
              else:
                  logger.warning(f"Unhandled event type: {event}")
                  if 'ResponseURL' in event:  # This is a CloudFormation event
                      cfnresponse.send(event, context, cfnresponse.FAILED, 
                                      {'Message': 'Unhandled request type'})

          def sanitize_string(s):
              """
              Remove non-ASCII characters from string to prevent CloudWatch API errors
              """
              if not s:
                  return ""
              
              # First normalize Unicode (e.g., convert é to e)
              normalized = unicodedata.normalize('NFKD', s)
              
              # Strip accents
              result = ''.join([c for c in normalized if not unicodedata.combining(c)])
              
              # Remove remaining non-ASCII characters
              result = re.sub(r'[^\x00-\x7F]+', '', result).strip()
              
              # If the result is empty after sanitization, return a safe default
              if not result:
                  return "root"
                  
              # Ensure the string doesn't contain any problematic characters for CloudWatch
              result = re.sub(r'[^a-zA-Z0-9_\-./]', '_', result)
              
              return result

          def get_mount_path(instance_id, device):
              """
              Get the mount path for a device on an instance using SSM
              """
              # Set default mount path in case we can't determine it
              mount_path = "/"
              
              try:
                  # Convert device path to how it appears in the instance
                  device_name = device.replace('/dev/sd', '/dev/xvd')
                  
                  # Get the mount point using df command - safely catch all errors
                  try:
                      # Run the SSM command to get the mount point
                      response = ssm.send_command(
                          InstanceIds=[instance_id],
                          DocumentName='AWS-RunShellScript',
                          Parameters={'commands': [f"df -h | grep {device_name} | awk '{{print $6}}'"]}
                      )
                      
                      time.sleep(3)  # Brief wait for command to complete
                      
                      # Get the result
                      result = ssm.get_command_invocation(
                          CommandId=response['Command']['CommandId'],
                          InstanceId=instance_id
                      )
                      
                      # Extract the mount point from the command output
                      if result['Status'] == 'Success' and result['StandardOutputContent'].strip():
                          mount_path = sanitize_string(result['StandardOutputContent'].strip())
                          logger.info(f"Found mount path {mount_path} for device {device_name} on instance {instance_id}")
                      else:
                          logger.warning(f"Could not determine mount path for {device_name}. Using default '/'")
                  except Exception as e:
                      logger.error(f"Error in SSM command: {str(e)}")
                      logger.warning(f"Using default path '/' for alarm for device {device}")
              except Exception as e:
                  logger.error(f"Error determining mount path: {str(e)}")
                  logger.warning(f"Using default path '/' for CloudWatch alarm")
              
              return mount_path

          def setup_volume_monitoring(instance_id, volume_id, device):
              """
              Set up monitoring for a specific volume attached to an instance
              """
              # Get the mount path for this device
              mount_path = get_mount_path(instance_id, device)
              
              # Create a unique alarm name for this instance and mount path
              alarm_name = f"EBSAutoResize-{instance_id}-{sanitize_string(mount_path)}"
              
              # Set alarm threshold to 90%
              threshold = 90
              
              # Get the volume information for resize parameters
              try:
                  volume_response = ec2.describe_volumes(VolumeIds=[volume_id])
                  volume = volume_response['Volumes'][0]
                  
                  # Get volume tags for resize parameters (but we don't need EBSAutoResize on the volume anymore)
                  volume_tags = {tag['Key']: tag['Value'] for tag in volume.get('Tags', [])}
                  
                  # If the volume doesn't have ResizeAmountGB and MaxResizeGB tags, add them with defaults
                  if 'ResizeAmountGB' not in volume_tags or 'MaxResizeGB' not in volume_tags:
                      default_tags = []
                      
                      if 'ResizeAmountGB' not in volume_tags:
                          default_tags.append({'Key': 'ResizeAmountGB', 'Value': '10'})
                      
                      if 'MaxResizeGB' not in volume_tags:
                          default_tags.append({'Key': 'MaxResizeGB', 'Value': '1000'})
                      
                      if default_tags:
                          ec2.create_tags(
                              Resources=[volume_id],
                              Tags=default_tags
                          )
                          logger.info(f"Added default resize parameter tags to volume {volume_id}")
              except Exception as e:
                  logger.error(f"Error getting volume information: {str(e)}")
              
              # Log the dimensions for debugging
              logger.info(f"Creating alarm with dimensions: InstanceId={instance_id}, path={mount_path}")
              
              # Create or update CloudWatch alarm using CWAgent metrics
              try:
                  cloudwatch.put_metric_alarm(
                      AlarmName=alarm_name,
                      ComparisonOperator='GreaterThanOrEqualToThreshold',
                      EvaluationPeriods=3,
                      MetricName='disk_used_percent',
                      Namespace='CWAgent',
                      Period=300,  # 5 minutes
                      Statistic='Average',
                      Threshold=threshold,
                      ActionsEnabled=True,
                      AlarmDescription=f'Disk usage alarm for instance {instance_id}, volume {volume_id}, path {mount_path}',
                      Dimensions=[
                          {
                              'Name': 'InstanceId',
                              'Value': instance_id
                          },
                          {
                              'Name': 'path',
                              'Value': mount_path
                          }
                      ]
                  )
                  logger.info(f"Successfully created CloudWatch alarm for instance {instance_id}, mount path {mount_path}")
              except Exception as e:
                  logger.error(f"Error creating CloudWatch alarm: {str(e)}")
                  return
              
              # Set up event target for Step Functions
              rule_name = f"TriggerEBSResize-{alarm_name}"
              try:
                  events.put_rule(
                      Name=rule_name,
                      EventPattern=json.dumps({
                          "source": ["aws.cloudwatch"],
                          "detail-type": ["CloudWatch Alarm State Change"],
                          "detail": {
                              "alarmName": [alarm_name],
                              "state": {
                                  "value": ["ALARM"]
                              }
                          }
                      }),
                      State='ENABLED'
                  )
                  
                  # Target the Step Function with both volume ID and instance info
                  events.put_targets(
                      Rule=rule_name,
                      Targets=[
                          {
                              'Id': f'StepFunction-{volume_id}',
                              'Arn': STATE_MACHINE_ARN,
                              'RoleArn': os.environ['STEP_FUNCTION_ROLE_ARN'],
                              'Input': json.dumps({
                                  "volumeId": volume_id
                              })
                          }
                      ]
                  )
                  
                  logger.info(f"Created/updated event rule for alarm {alarm_name}")
              except Exception as e:
                  logger.error(f"Error creating EventBridge rule: {str(e)}")

          def check_for_tagged_instances():
              """
              Check for instances with the EBSAutoResize tag and set up monitoring for their volumes
              """
              # Get all EC2 instances
              ec2_response = ec2.describe_instances()
              
              # Process all instances to find ones with EBSAutoResize tag
              for reservation in ec2_response['Reservations']:
                  for instance in reservation['Instances']:
                      instance_id = instance['InstanceId']
                      
                      # Skip terminated or shutting-down instances
                      if instance['State']['Name'] in ['terminated', 'shutting-down']:
                          continue
                      
                      # Get instance tags
                      instance_tags = {tag['Key']: tag['Value'] for tag in instance.get('Tags', [])}
                      
                      # Check if auto-resize is enabled for this instance
                      if instance_tags.get('EBSAutoResize', 'false').lower() == 'true':
                          logger.info(f"Instance {instance_id} has EBSAutoResize tag enabled. Setting up monitoring.")
                          
                          # For each attached volume, set up monitoring
                          for block_device in instance.get('BlockDeviceMappings', []):
                              if 'Ebs' in block_device:
                                  volume_id = block_device['Ebs']['VolumeId']
                                  device = block_device['DeviceName']
                                  
                                  # Set up monitoring for this volume
                                  setup_volume_monitoring(instance_id, volume_id, device)

          def setup_instance_check_schedule(lambda_arn):
              """
              Create an EventBridge rule to periodically check for new instances with tags
              """
              # Create an EventBridge rule to run every hour
              events.put_rule(
                  Name='CheckForNewEBSAutoResizeInstancesRule',
                  ScheduleExpression='rate(1 hour)',
                  State='ENABLED',
                  Description='Check for new EC2 instances with EBSAutoResize tag'
              )
              
              # Set the Lambda function as the target
              events.put_targets(
                  Rule='CheckForNewEBSAutoResizeInstancesRule',
                  Targets=[
                      {
                          'Id': 'EBSAutoResizeInstanceCheckTarget',
                          'Arn': lambda_arn
                      }
                  ]
              )
              
              # Add permission for EventBridge to invoke Lambda
              lambda_client = boto3.client('lambda')
              try:
                  lambda_client.add_permission(
                      FunctionName=lambda_arn.split(':')[6],
                      StatementId='AllowEventBridgeToInvokeLambda',
                      Action='lambda:InvokeFunction',
                      Principal='events.amazonaws.com',
                      SourceArn=events.describe_rule(Name='CheckForNewEBSAutoResizeInstancesRule')['Arn']
                  )
              except lambda_client.exceptions.ResourceConflictException:
                  # Permission already exists
                  pass

  # Custom Resource to trigger creation of CloudWatch Alarms
  EBSAlarmSetup:
    Type: 'AWS::CloudFormation::CustomResource'
    Properties:
      ServiceToken: !GetAtt EBSAlarmCreationFunction.Arn

Outputs:
  EBSResizeStateMachine:
    Description: 'Step Functions State Machine that handles EBS volume resizing'
    Value: !Ref EBSResizeStateMachine
  EBSAlarmCreationFunction:
    Description: 'Lambda function that creates CloudWatch alarms for EBS volumes'
    Value: !GetAtt EBSAlarmCreationFunction.Arn